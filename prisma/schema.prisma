generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  emailVerified   DateTime?
  image           String?
  discordId       String?       @unique
  discordUsername String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  accounts        Account[]
  clients         Client[]
  invoices        Invoice[]
  projects        Project[]
  sessions        Session[]
  sideProjects    SideProject[]
  timers          Timer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String    @default("NOT_STARTED")
  priority       String    @default("MEDIUM")
  startDate      DateTime?
  dueDate        DateTime?
  completedAt    DateTime?
  workedSeconds  Int       @default(0)
  estimatedHours Float?
  clientId       String?
  userId         String
  tags           String?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  invoices       Invoice[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  client         Client?   @relation(fields: [clientId], references: [id])
  timers         Timer[]
}

model SideProject {
  id            String    @id @default(cuid())
  title         String
  description   String?
  status        String    @default("NOT_STARTED")
  priority      String    @default("LOW")
  startDate     DateTime?
  dueDate       DateTime?
  completedAt   DateTime?
  workedSeconds Int       @default(0)
  userId        String
  tags          String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  discordId String?
  notes     String?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]
  projects  Project[]
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceNumber String    @unique
  amount        Float
  currency      String    @default("USD")
  status        String    @default("DRAFT")
  issuedDate    DateTime  @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  description   String?
  clientId      String?
  projectId     String?
  userId        String
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project?  @relation(fields: [projectId], references: [id])
  client        Client?   @relation(fields: [clientId], references: [id])
}

model Timer {
  id          String    @id @default(cuid())
  userId      String
  projectId   String?
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int       @default(0)
  isActive    Boolean   @default(true)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project?  @relation(fields: [projectId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
